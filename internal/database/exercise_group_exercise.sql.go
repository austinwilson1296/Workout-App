// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: exercise_group_exercise.sql

package database

import (
	"context"
)

const getExercisesPerCategoryByExperience = `-- name: GetExercisesPerCategoryByExperience :many
WITH RankedExercises AS (
    SELECT 
        e.id AS exercise_id,
        e.name AS exercise_name,
        eg.name AS category_name,
        RANDOM() AS random_sort
    FROM 
        exercise e
    JOIN 
        exercise_group_exercise ege ON e.id = ege.exercise_id
    JOIN 
        exercise_group eg ON ege.group_id = eg.id
    JOIN 
        exercise_level_mapping elm ON e.id = elm.exercise_id
    WHERE 
        eg.name IN ('core_hips_legs', 'core_spinal', 'thoracic_spine_mobility', 'scapulo_thoracic', 'shoulders_scapula')
        AND elm.level_id = $1
    ORDER BY 
        random_sort
    LIMIT $2 * (SELECT COUNT(DISTINCT name) FROM exercise_group WHERE name IN ('core_hips_legs', 'core_spinal', 'thoracic_spine_mobility', 'scapulo_thoracic', 'shoulders_scapula'))
)
SELECT 
    exercise_id,
    exercise_name,
    category_name
FROM 
    RankedExercises
GROUP BY 
    category_name, 
    exercise_id, 
    exercise_name
LIMIT $2
`

type GetExercisesPerCategoryByExperienceParams struct {
	LevelID int32
	Limit   int32
}

type GetExercisesPerCategoryByExperienceRow struct {
	ExerciseID   int32
	ExerciseName string
	CategoryName string
}

func (q *Queries) GetExercisesPerCategoryByExperience(ctx context.Context, arg GetExercisesPerCategoryByExperienceParams) ([]GetExercisesPerCategoryByExperienceRow, error) {
	rows, err := q.db.QueryContext(ctx, getExercisesPerCategoryByExperience, arg.LevelID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetExercisesPerCategoryByExperienceRow
	for rows.Next() {
		var i GetExercisesPerCategoryByExperienceRow
		if err := rows.Scan(&i.ExerciseID, &i.ExerciseName, &i.CategoryName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
